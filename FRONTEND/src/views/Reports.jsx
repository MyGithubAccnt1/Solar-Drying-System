import { useState, useEffect } from "react";
import axios from "axios";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import JsPdf from "jspdf";

function Reports() {
  const [users, setUsers] = useState([]);
  const [farmers, setFarmers] = useState([]);
  const [dryers, setDryers] = useState([]);
  const [filter, setFilter] = useState("All");
  const [loading, setLoading] = useState(true);

  const tableHeadings = ["#", "Name", "Role"];


  const filteredUsers =
    filter === "All"
      ? users
      : users.filter((u) => u.role?.toLowerCase() === filter.toLowerCase());

      const downloadExcel = () => {
        if (filteredUsers.length === 0) {
          alert("No data to export!");
          return;
        }
      
        const today = new Date();
        const formattedDate = today.toISOString().slice(0, 10);
      
        const companyName = "Solar Dryer Monitoring System";
        const reportTitle = "User Report Summary";
        const generatedBy = "Generated by Admin";
        const timestamp = today.toLocaleString();
      
        const heading = [
          [companyName],
          [reportTitle],
          [generatedBy],
          [`Date: ${timestamp}`],
          [""],
          ["#", "Name", "Email", "Mobile", "Address", "Role / Status"],
        ];
        
        const data = filteredUsers.map((u, i) => [
          i + 1,
          `${u.first_name || ""} ${u.last_name || ""}`,
          u.email || "N/A",
          u.mobile_number || "N/A",
          u.address || "N/A",
          u.role || "N/A",
        ]);
        
        const ws = XLSX.utils.aoa_to_sheet([...heading, ...data]);
      
        ws["!cols"] = [
          { wch: 5 },    
          { wch: 25 },  
          { wch: 30 },  
          { wch: 18 },   
          { wch: 40 },  
          { wch: 15 },  
        ];
      
        ws["!merges"] = [
          { s: { r: 0, c: 0 }, e: { r: 0, c: 3 } },
          { s: { r: 1, c: 0 }, e: { r: 1, c: 3 } },
          { s: { r: 2, c: 0 }, e: { r: 2, c: 3 } },
          { s: { r: 3, c: 0 }, e: { r: 3, c: 3 } },
        ];
      
        const headerStyle = {
          font: { bold: true, sz: 14, color: { rgb: "FFFFFF" } },
          fill: { fgColor: { rgb: "3B82F6" } },  
          alignment: { horizontal: "center", vertical: "center" },
          border: {
            top: { style: "thin", color: { rgb: "CCCCCC" } },
            bottom: { style: "thin", color: { rgb: "CCCCCC" } },
            left: { style: "thin", color: { rgb: "CCCCCC" } },
            right: { style: "thin", color: { rgb: "CCCCCC" } },
          },
        };
      
        const titleStyle = {
          font: { bold: true, sz: 16, color: { rgb: "1F2937" } },  
          alignment: { horizontal: "center" },
        };
      
        const normalStyle = {
          alignment: { horizontal: "center" },
          border: {
            top: { style: "thin", color: { rgb: "DDDDDD" } },
            bottom: { style: "thin", color: { rgb: "DDDDDD" } },
            left: { style: "thin", color: { rgb: "DDDDDD" } },
            right: { style: "thin", color: { rgb: "DDDDDD" } },
          },
        };
      
        const range = XLSX.utils.decode_range(ws["!ref"]);
        for (let R = 0; R <= range.e.r; ++R) {
          for (let C = 0; C <= range.e.c; ++C) {
            const cellAddress = XLSX.utils.encode_cell({ r: R, c: C });
            if (!ws[cellAddress]) continue;
      
            if (R < 4) {
              ws[cellAddress].s = titleStyle;
            }
            else if (R === 5) {
              ws[cellAddress].s = headerStyle;
            }
            else {
              ws[cellAddress].s = normalStyle;
            }
          }
        }
      
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "User Report");
      
        const fileName = `User_Report_${formattedDate}.xlsx`;
        XLSX.writeFile(wb, fileName);
      };

const downloadPDF = async () => {
  try {
    const doc = new JsPdf("l", "mm", "a4");

    const getCenteredPage = (text) =>
      (doc.internal.pageSize.width / 2) - (doc.getTextWidth(text) / 2);
    const getCenteredX = (rectX, rectWidth, text) =>
      rectX + (rectWidth / 2) - (doc.getTextWidth(text) / 2);

    const date = new Date();
    const formattedDate = `${String(date.getMonth() + 1).padStart(2, "0")}/${String(date.getDate()).padStart(2, "0")}/${date.getFullYear()}`;
    
    const headers = {
      name: "Solar Dryer Monitoring System",
      address: "Department of Agriculture, Philippines",
      tin: "TIN: 123-456-789",
      employee: "Generated by Admin"
    };

    doc.setFontSize(6);
    doc.setFont("helvetica", "normal");
    doc.text(headers.name, getCenteredPage(headers.name), 10);
    doc.text(headers.address, getCenteredPage(headers.address), 13);
    doc.text(headers.tin, getCenteredPage(headers.tin), 16);
    const pageWidth = doc.internal.pageSize.getWidth();
    doc.text(`Generated by: ${headers.employee}`, 2, 31);
    doc.text(`Date: ${formattedDate}`, pageWidth - 2 - doc.getTextWidth(`Date: ${formattedDate}`), 31);

    const height = 5;
    doc.rect(2, 37, 292, height, "S");
    doc.setFont("helvetica", "bold");
    doc.text("REPORT SUMMARY", getCenteredX(2, 294, "REPORT SUMMARY"), 40);

    const pageMargin = 3;  
    const tableWidth = pageWidth - pageMargin * 2;
    
    const columns = [
      { label: "#", ratio: 0.05 },
      { label: "Name", ratio: 0.20 },
      { label: "Email", ratio: 0.22 },
      { label: "Mobile", ratio: 0.15 },
      { label: "Address", ratio: 0.23 },
      { label: "Role", ratio: 0.15 },
    ];

    const truncateText = (text, maxLength = 60) => {
      if (!text) return "";
      return text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
    };

    
    let currentX = pageMargin;
    columns.forEach((col) => {
      col.x = currentX;
      col.width = tableWidth * col.ratio;
      currentX += col.width;
    });
    
    const data = filteredUsers.map((u, i) => ({
      no: i + 1,
      name: `${u.first_name || ""} ${u.last_name || ""}`,
      email: u.email || "N/A",
      mobile: u.mobile_number || "N/A",
      address: u.address || "N/A",
      role: u.role || "N/A",
    }));
 
    let y = 45;
    doc.setFontSize(7);
    doc.setFont("helvetica", "bold");
    columns.forEach((col) => {
      doc.rect(col.x, y, col.width, 7, "S");
      doc.text(col.label, col.x + 2, y + 5);
    });

    y += 7;
    doc.setFont("helvetica", "normal");

    data.forEach((row) => {
      columns.forEach((col) => {
        doc.rect(col.x, y, col.width, 6, "S");
        let text = "";
        switch (col.label) {
          case "#": text = row.no; break;
          case "Name": text = row.name; break;
          case "Email": text = row.email; break;
          case "Mobile": text = row.mobile; break;
          case "Address": text = truncateText(row.address, 60); break;
          case "Role / Status": text = row.role; break;
          default: text = "-";
        }
        doc.text(String(text), col.x + 2, y + 4);
      });

      y += 6;

      if (y > 190) {
        doc.addPage();
        y = 20;
      }
    });

    doc.setFont("helvetica", "italic");
    doc.setFontSize(6);
    doc.text(
      `Generated on ${formattedDate}`,
      getCenteredPage(`Generated on ${formattedDate}`),
      200
    );


    doc.save("User_Report_Summary.pdf");
  } catch (err) {
    console.error("PDF generation failed:", err);
    alert("Error generating PDF");
  }
};

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const token = localStorage.getItem("token");
        const base = import.meta.env.VITE_API;
        const headers = { Authorization: `Bearer ${token}` };

        const usersRes = await axios.get(`${base}/users`, { headers });
        const allUsers = usersRes.data || [];
        setUsers(allUsers);
        setFarmers(allUsers.filter((u) => u.role === "farmer"));

        const dryersRes = await axios.get(`${base}/dryers`, { headers });
        setDryers(dryersRes.data || []);
      } catch (err) {
        console.error("Error fetching reports:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const cards = [
    {
      label: "Registered Users",
      value: users.length,
      icon: "üë§",
      bg: "from-green-400 to-green-500",
    },
    {
      label: "Verified Solar Dryer Owners",
      value: dryers.length,
      icon: "‚òÄÔ∏è",
      bg: "from-blue-400 to-blue-500",
    },
    {
      label: "Registered Farmers",
      value: farmers.length,
      icon: "üåæ",
      bg: "from-red-400 to-red-500",
    },
  ];

  return (
    <div className="w-full min-h-screen bg-gradient-to-br from-gray-100 to-gray-200 md:p-8 flex flex-col">
      <div className="w-full bg-white p-8 rounded-2xl shadow-xl">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-3xl font-bold text-gray-800 tracking-tight">
             Reports Dashboard
          </h2>
          <div className="flex gap-3">
            <button
              onClick={downloadExcel}
              className="bg-green-600 text-white px-4 py-2 rounded-lg shadow hover:bg-green-700 transition"
            >
              Download Excel
            </button>
            <button
              onClick={downloadPDF}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700 transition"
            >
              Download PDF
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-10">
          {cards.map((card, idx) => (
            <div
              key={idx}
              className={`bg-gradient-to-r ${card.bg} text-white rounded-xl shadow-lg p-6 flex flex-col justify-between transform hover:scale-[1.03] transition`}
            >
              <div className="flex items-center justify-between">
                <span className="text-2xl">{card.icon}</span>
                <span className="text-lg font-semibold">{card.label}</span>
              </div>
              <div className="mt-5 text-5xl font-bold text-center drop-shadow-sm">
                {loading ? "..." : card.value}
              </div>
            </div>
          ))}
        </div>

        <div className="bg-gray-50 p-6 rounded-xl shadow-md w-full">
          <div className="flex justify-between items-center mb-5">
            <h3 className="text-xl font-semibold text-gray-700">
              User Registrations
            </h3>
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="border border-gray-300 rounded-md px-3 py-2 text-gray-700 shadow-sm focus:ring-2 focus:ring-green-500"
            >
              <option value="All">All</option>
              <option value="farmer">Farmer</option>
              <option value="owner">Owner</option>
              <option value="admin">Admin</option>
            </select>
          </div>

          <div className="overflow-x-auto rounded-xl border border-gray-200">
            <table className="w-full border-collapse text-sm">
              <thead className="bg-[rgb(138,183,45)] text-white">
                <tr>
                  {tableHeadings.map((heading, idx) => (
                    <th
                      key={idx}
                      className="py-3 px-4 text-left font-semibold uppercase tracking-wide"
                    >
                      {heading}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="bg-white">
                {loading ? (
                  <tr>
                    <td
                      colSpan={tableHeadings.length}
                      className="py-6 text-center text-gray-500"
                    >
                      Loading data...
                    </td>
                  </tr>
                ) : filteredUsers.length > 0 ? (
                  filteredUsers.map((user, i) => (
                    <tr
                      key={user.id}
                      className="border-b hover:bg-gray-100 transition"
                    >
                      <td className="py-3 px-4">{i + 1}</td>
                      <td className="py-3 px-4">{user.first_name || user.name}</td>
                      <td className="py-3 px-4">
                        <span
                          className={`px-3 py-1 rounded-full text-xs sm:text-sm font-medium
                            ${
                              user.role === "owner"
                                ? "bg-green-200 text-green-800"
                                : user.role === "farmer"
                                ? "bg-red-200 text-red-800"
                                : "bg-blue-200 text-blue-800"
                            }`}
                        >
                          {user.role}
                        </span>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td
                      colSpan={tableHeadings.length}
                      className="py-6 text-center text-gray-500"
                    >
                      No users found.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Reports;
