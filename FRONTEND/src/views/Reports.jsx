import { useState, useEffect } from "react";
import axios from "axios";
import * as XLSX from "xlsx";
import JsPdf from "jspdf";
import { toast } from "react-toastify";

function Reports() {
  const [users, setUsers] = useState([]);
  const [farmers, setFarmers] = useState([]);
  const [dryers, setDryers] = useState([]);
  const [filter, setFilter] = useState("All");
  const [loading, setLoading] = useState(true);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [showDialog, setShowDialog] = useState(false);
  const [downloadType, setDownloadType] = useState("");

  const tableHeadings = ["#", "Name", "Email", "Mobile", "Role"];

  const filteredUsers =
    filter === "All"
      ? users
      : users.filter((u) => u.role?.toLowerCase() === filter.toLowerCase());

  const filterByDateRange = () => {
    if (!startDate || !endDate) {
      toast.error("Please select both start and end dates.");
      return [];
    }

    const start = new Date(startDate);
    const end = new Date(endDate);

    const filtered = filteredUsers.filter((u) => {
      if (!u.created_at) return false;
      const created = new Date(u.created_at);
      return created >= start && created <= end;
    });

    if (filtered.length === 0) toast.error("No users found within the selected date range.");
    return filtered;
  };

  const downloadExcel = () => {
    const dataToExport = filterByDateRange();
    if (dataToExport.length === 0) return;

    const today = new Date();
    const formattedDate = today.toISOString().slice(0, 10);
    const companyName = "Solar Dryer Monitoring System";
    const reportTitle = "User Report Summary";
    const generatedBy = "Generated by Admin";
    const timestamp = today.toLocaleString();

    const heading = [
      [companyName],
      [reportTitle],
      [generatedBy],
      [`Date: ${timestamp}`],
      [`Date Range: ${startDate} to ${endDate}`],
      [""],
      ["#", "Name", "Email", "Mobile", "Address", "Role"],
      
    ];

    const data = dataToExport.map((u, i) => [
      i + 1,
      `${u.first_name || ""} ${u.last_name || ""}`,
      u.email || "N/A",
      u.mobile_number || "N/A",
      u.address?.length > 50 ? u.address.substring(0, 50) + "..." : u.address || "N/A",
      u.role || "N/A",
    ]);

    const ws = XLSX.utils.aoa_to_sheet([...heading, ...data]);
    ws["!cols"] = [
      { wch: 5 },
      { wch: 25 },
      { wch: 30 },
      { wch: 18 },
      { wch: 40 },
      { wch: 15 },
    ];

    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "User Report");
    XLSX.writeFile(wb, `User_Report_${formattedDate}.xlsx`);
  };

  const downloadPDF = () => {
    const dataToExport = filterByDateRange();
    if (dataToExport.length === 0) return;

    const doc = new JsPdf("l", "mm", "a4");
    const getCenteredPage = (text) =>
      doc.internal.pageSize.width / 2 - doc.getTextWidth(text) / 2;

    doc.setFontSize(6);
    doc.text("Solar Dryer Monitoring System", getCenteredPage("Solar Dryer Monitoring System"), 10);
    doc.text("Department of Agriculture, Philippines", getCenteredPage("Department of Agriculture, Philippines"), 13);
    doc.text(`Date Range: ${startDate} to ${endDate}`, getCenteredPage(`Date Range: ${startDate} to ${endDate}`), 16);

      
    const pageWidth = doc.internal.pageSize.getWidth();
    const tableWidth = pageWidth - 6;
    let y = 30;

    const boxHeight = 7;
    const boxY = 22; 
     // doc.setFillColor(230, 230, 230); // light gray background
    // doc.setFont("helvetica", "bold");
    // doc.setFontSize(9);
    // doc.rect(5, boxY, tableWidth, boxHeight, "F"); // F = fill
    // doc.text("REPORT SUMMARY", getCenteredPage("REPORT SUMMARY"), boxY + 5);

    const columns = [
      { label: "#", ratio: 0.05 },
      { label: "Name", ratio: 0.20 },
      { label: "Email", ratio: 0.22 },
      { label: "Mobile", ratio: 0.15 },
      { label: "Address", ratio: 0.23 },
      { label: "Role", ratio: 0.15 },
    ];
 
    let x = 3;
    columns.forEach((c) => {
      c.x = x;
      c.width = tableWidth * c.ratio;
      x += c.width;
    });

    doc.setFontSize(7);
    doc.setFont("helvetica", "bold");
    columns.forEach((col) => {
      doc.rect(col.x, y, col.width, 7, "S");
      doc.text(col.label, col.x + 2, y + 5);
    });

    y += 7;
    doc.setFont("helvetica", "normal");

    dataToExport.forEach((u, i) => {
      const row = {
        "#": i + 1,
        Name: `${u.first_name || ""} ${u.last_name || ""}`,
        Email: u.email || "N/A",
        Mobile: u.mobile_number || "N/A",
        Address: u.address?.length > 50 ? u.address.substring(0, 50) + "..." : u.address || "N/A",
        Role: u.role || "N/A",
      };

      columns.forEach((col) => {
        doc.rect(col.x, y, col.width, 6, "S");
        doc.text(String(row[col.label]), col.x + 2, y + 4);
      });

      y += 6;
      if (y > 190) {
        doc.addPage();
        y = 20;
      }
    });

    doc.save("User_Report_Summary.pdf");
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const token = localStorage.getItem("token");
        const base = import.meta.env.VITE_API;
        const headers = { Authorization: `Bearer ${token}` };

        const usersRes = await axios.get(`${base}/users`, { headers });
        const allUsers = usersRes.data || [];
        setUsers(allUsers);
        setFarmers(allUsers.filter((u) => u.role === "farmer"));

        const dryersRes = await axios.get(`${base}/dryers`, { headers });
        setDryers(dryersRes.data || []);
      } catch (err) {
        console.error("Error fetching reports:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const cards = [
    { label: "Registered Users", value: users.length, icon: "üë§", bg: "from-green-400 to-green-500" },
    { label: "Verified Solar Dryer Owners", value: dryers.length, icon: "‚òÄÔ∏è", bg: "from-blue-400 to-blue-500" },
    { label: "Registered Farmers", value: farmers.length, icon: "üåæ", bg: "from-red-400 to-red-500" },
  ];

  return (
    <div className="w-full min-h-screen bg-gradient-to-br from-gray-100 to-gray-200 md:p-8 flex flex-col">
      <div className="w-full bg-white p-8 rounded-2xl shadow-xl">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-3xl font-bold text-gray-800 tracking-tight">Reports Dashboard</h2>
          <div className="flex gap-3">
            <button
              onClick={() => {
                setDownloadType("excel");
                setShowDialog(true);
              }}
              className="bg-green-600 text-white px-4 py-2 rounded-lg shadow hover:bg-green-700 transition"
            >
              Download Excel
            </button>
            <button
              onClick={() => {
                setDownloadType("pdf");
                setShowDialog(true);
              }}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700 transition"
            >
              Download PDF
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-10">
          {cards.map((card, idx) => (
            <div
              key={idx}
              className={`bg-gradient-to-r ${card.bg} text-white rounded-xl shadow-lg p-6 flex flex-col justify-between transform hover:scale-[1.03] transition`}
            >
              <div className="flex items-center justify-between">
                <span className="text-2xl">{card.icon}</span>
                <span className="text-lg font-semibold">{card.label}</span>
              </div>
              <div className="mt-5 text-5xl font-bold text-center">{loading ? "..." : card.value}</div>
            </div>
          ))}
        </div>

        <div className="bg-gray-50 p-6 rounded-xl shadow-md w-full">
          <div className="flex justify-between items-center mb-5">
            <h3 className="text-xl font-semibold text-gray-700">User Registrations</h3>
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="border border-gray-300 rounded-md px-3 py-2 text-gray-700 shadow-sm focus:ring-2 focus:ring-green-500"
            >
              <option value="All">All</option>
              <option value="farmer">Farmer</option>
              <option value="owner">Owner</option>
              <option value="admin">Admin</option>
            </select>
          </div>

          <div className="overflow-x-auto rounded-xl border border-gray-200">
            <table className="w-full border-collapse text-sm">
              <thead className="bg-[rgb(138,183,45)] text-white">
                <tr>
                  {tableHeadings.map((heading, idx) => (
                    <th key={idx} className="py-3 px-4 text-left font-semibold uppercase tracking-wide">
                      {heading}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="bg-white">
                {loading ? (
                  <tr>
                    <td colSpan={tableHeadings.length} className="py-6 text-center text-gray-500">
                      Loading data...
                    </td>
                  </tr>
                ) : filteredUsers.length > 0 ? (
                  filteredUsers.map((user, i) => (
                    <tr key={user.id} className="border-b hover:bg-gray-100 transition">
                      <td className="py-3 px-4">{i + 1}</td>
                      <td className="py-3 px-4">{user.first_name || user.name}</td>
                      <td className="py-3 px-4">{user.email}</td>
                      <td className="py-3 px-4">{user.mobile_number}</td>
                      <td className="py-3 px-4">
                        <span
                          className={`px-3 py-1 rounded-full text-xs sm:text-sm font-medium
                            ${
                              user.role === "owner"
                                ? "bg-green-200 text-green-800"
                                : user.role === "farmer"
                                ? "bg-red-200 text-red-800"
                                : "bg-blue-200 text-blue-800"
                            }`}
                        >
                          {user.role}
                        </span>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={tableHeadings.length} className="py-6 text-center text-gray-500">
                      No users found.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {showDialog && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm">
          <div className="bg-white rounded-xl shadow-2xl p-6 w-[90%] sm:w-[400px]">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Select Date Range</h3>

            <div className="flex flex-col gap-3">
              <div>
                <label className="block text-sm text-gray-600 mb-1">From</label>
                <input
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-green-500"
                />
              </div>

              <div>
                <label className="block text-sm text-gray-600 mb-1">To</label>
                <input
                  type="date"
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-green-500"
                />
              </div>
            </div>

            <div className="flex justify-end mt-5 gap-3">
              <button
                onClick={() => setShowDialog(false)}
                className="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400 transition"
              >
                Cancel
              </button>
              <button
                onClick={() => {
                  if (!startDate || !endDate) {
                    toast.error("Please select both start and end dates.");
                    return;
                  }
                  setShowDialog(false);
                  if (downloadType === "excel") downloadExcel();
                  else if (downloadType === "pdf") downloadPDF();
                }}
                className="bg-green-600 text-white px-4 py-2 rounded-lg shadow hover:bg-green-700 transition"
              >
                Confirm
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Reports;
